{"version":3,"file":"js/custom/documentation/forms/formvalidation/basic.js","mappings":";;;;;;AAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6CAA6C;AAC7C,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6CAA6C;AAC7C,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6CAA6C;AAC7C,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6CAA6C;AAC7C,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6CAA6C;AAC7C,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,6CAA6C;AAC7C,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://keenthemes/../src/js/custom/documentation/forms/formvalidation/basic.js"],"sourcesContent":["\"use strict\";\r\n\r\n// Class definition\r\nvar KTFormValidationDemoBasic = function () {\r\n\r\n    // Private functions\r\n    var exampleBasic = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_basic');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'text_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Text input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'email_input': {\r\n                        validators: {\r\n                            emailAddress: {\r\n                                message: 'The value is not a valid email address'\r\n                            },\r\n                            notEmpty: {\r\n                                message: 'Email address is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'current_password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Current password is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'new_password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password is required'\r\n                            },\r\n                            callback: {\r\n                                message: 'Please enter valid password',\r\n                                callback: function (input) {\r\n                                    if (input.value.length > 0) {\r\n                                        return validatePassword();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    'confirm_password': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'The password confirmation is required'\r\n                            },\r\n                            identical: {\r\n                                compare: function () {\r\n                                    return form.querySelector('[name=\"new_password\"]').value;\r\n                                },\r\n                                message: 'The password and its confirm are not the same'\r\n                            }\r\n                        }\r\n                    },\r\n                    'textarea_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Textarea input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'radio_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Radio input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                    'checkbox_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Radio input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    var exampleText = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_text');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'text_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Text input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_text_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleEmail = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_email');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'email_input': {\r\n                        validators: {\r\n                            emailAddress: {\r\n                                message: 'The value is not a valid email address'\r\n                            },\r\n                            notEmpty: {\r\n                                message: 'Email address is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_email_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleTextarea = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_textarea');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'textarea_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Textarea input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_textarea_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleRadio = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_radio');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'radio_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Radio input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_radio_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    var exampleCheckbox = function () {\r\n        // Define form element\r\n        const form = document.getElementById('kt_docs_formvalidation_checkbox');\r\n\r\n        // Init form validation rules. For more info check the FormValidation plugin's official documentation:https://formvalidation.io/\r\n        var validator = FormValidation.formValidation(\r\n            form,\r\n            {\r\n                fields: {\r\n                    'checkbox_input': {\r\n                        validators: {\r\n                            notEmpty: {\r\n                                message: 'Checkbox input is required'\r\n                            }\r\n                        }\r\n                    },\r\n                },\r\n\r\n                plugins: {\r\n                    trigger: new FormValidation.plugins.Trigger(),\r\n                    bootstrap: new FormValidation.plugins.Bootstrap5({\r\n                        rowSelector: '.fv-row',\r\n                        eleInvalidClass: '',\r\n                        eleValidClass: ''\r\n                    })\r\n                }\r\n            }\r\n        );\r\n\r\n        // Submit button handler\r\n        const submitButton = document.getElementById('kt_docs_formvalidation_checkbox_submit');\r\n        submitButton.addEventListener('click', function (e) {\r\n            // Prevent default button action\r\n            e.preventDefault();\r\n\r\n            // Validate form before submit\r\n            if (validator) {\r\n                validator.validate().then(function (status) {\r\n                    console.log('validated!');\r\n\r\n                    if (status == 'Valid') {\r\n                        // Show loading indication\r\n                        submitButton.setAttribute('data-kt-indicator', 'on');\r\n\r\n                        // Disable button to avoid multiple click \r\n                        submitButton.disabled = true;\r\n\r\n                        // Simulate form submission. For more info check the plugin's official documentation: https://sweetalert2.github.io/\r\n                        setTimeout(function () {\r\n                            // Remove loading indication\r\n                            submitButton.removeAttribute('data-kt-indicator');\r\n\r\n                            // Enable button\r\n                            submitButton.disabled = false;\r\n\r\n                            // Show popup confirmation \r\n                            Swal.fire({\r\n                                text: \"Form has been successfully submitted!\",\r\n                                icon: \"success\",\r\n                                buttonsStyling: false,\r\n                                confirmButtonText: \"Ok, got it!\",\r\n                                customClass: {\r\n                                    confirmButton: \"btn btn-primary\"\r\n                                }\r\n                            });\r\n\r\n                            //form.submit(); // Submit form\r\n                        }, 2000);\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return {\r\n        // Public Functions\r\n        init: function () {\r\n            exampleText();\r\n            exampleEmail();\r\n            exampleTextarea();\r\n            exampleRadio();\r\n            exampleCheckbox();\r\n        }\r\n    };\r\n}();\r\n\r\n// On document ready\r\nKTUtil.onDOMContentLoaded(function () {\r\n    KTFormValidationDemoBasic.init();\r\n});\r\n"],"names":[],"sourceRoot":""}